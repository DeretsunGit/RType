Ce fichier how to vise a expliquer comment implémenter les méthodes de ClientCommunication.cpp
pour la soutenance intermédiaire RType.

Les méthodes qui nous intéresses sont :

 Packet* ClientCommunication::TCPsendReady() const
 
	Cette méthode retourne un packet sérialisé qui doit être directement écrit sur la socket.
	Ce paquet est utilisé pour prévenir le serveur que le client cherche à se connecter à une partie.
	Sans la gestion du choix des rooms pour l'instant, le client envoi directement au serveur lorsqu'il est
	prêt à passer en UDP et a traiter les informations.
	De son côté, le serveur doit répondre au client par le packet "Start Game" qui contient
	le port UDP de la room.
	
 unsigned short ClientCommunication::TCPgetStartGame(const char* data) const
 
	Cette méthode prends en paramètre le packet TCP reçu en réponse au "send Ready". Elle le traite et
	retourne le port UDP correspondant à la room sur lequel le client a été automatiquement assigné.
	Si le packet TCP reçu ne possède pas le bon opcode ou qu'il ne possède pas les informations correctes,
	la méthode retourne 0.
	Une fois le port récupéré, la client créer sa socket UDP sur ce port et commence à envoyer et recevoir
	les informations de jeu définie par les deux méthodes suivantes.
	
 Packet* ClientCommunication::UDPsendInputs(const s_inputs& inputs) const
 
	Cette méthode prends en parametre une réference constante sur une structure s_inputs contenant les
	inputs du client à l'instant T. La méthode sérialise cette structure et retourne un packet devant
	être directement écrit sur la socket UDP.
	
 void	ClientCommunication::UDPgetGameElements(const char* data) const
 
	Cette méthode n'est pas encore correctement définie. Elle prend en paramètre le contenu des packets UDP
	envoyés par le serveur. Cependant la valeur de retour dépendra en grande partie de la conception du
	client. Actuellement, elle sérialise la liste d'élements et de players contenu dans le packet et les
	mets dans deux listes, une de s_element et une de s_player. Ces structures peuvent être aisément 
	transformée en classe Element afin d'être réassemblée dans une seule liste qui pourrait être retournée
	par la fonction. A voir.